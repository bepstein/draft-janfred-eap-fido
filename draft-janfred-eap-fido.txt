



EAP Method Update                                         J.-F. Rieckers
Internet-Draft                                                       DFN
Intended status: Standards Track                               S. Winter
Expires: 17 April 2024                                           RESTENA
                                                         15 October 2023


                                EAP-FIDO
                     draft-janfred-eap-fido-latest

Abstract

   This document specifies an EAP method leveraging FIDO2 keys for
   authentication in EAP.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-janfred-eap-fido/.

   Discussion of this document takes place on the EAP Method Update
   Working Group mailing list (mailto:emu@ietf.org), which is archived
   at https://mailarchive.ietf.org/arch/browse/emu/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/emu/.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 17 April 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Overview over the EAP-FIDO protocol
     3.1.  TLS handshake phase
     3.2.  FIDO-exchange phase
   4.  EAP-FIDO protocol flow and message format
     4.1.  Preconditions and Configuration
     4.2.  TLS handshake
     4.3.  FIDO-exchange
       4.3.1.  Message format
       4.3.2.  Potocol Sequence
   5.  Implementation Guidelines
   6.  Design decisions
     6.1.  Registration of FIDO2 keys is out of scope
       6.1.1.  Discoverable credentials vs. Non-Discoverable
               credentials
       6.1.2.  User involvement during registration
     6.2.  FIDO2 key scopes
     6.3.  EAP-Method with EAP-TLS vs standalone EAP method to be used
           in tunnels
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The Extensible Authentication Protocol (EAP) [RFC3748] is a widely
   used standard that allows a server to authenticate a client using
   different authentication methods.  There is a huge variety of EAP
   methods available, that serve different purposes and have different
   security implications.

   Two common EAP methods are EAP-PEAP and EAP-TTLS [RFC5281], that both
   use EAP-TLS [RFC5216] to provide confidentiality of the inner
   authentication.  This inner authentication is most commonly password-
   based, meaning that an attacker that manages to compromise the TLS
   connection can eavesdrop on the authentication and observe the
   password.  The authentication of the server to the client within the
   TLS handshake thus is a vital security function of these EAP methods.

   The operational praxis has shown that this is a common problem and
   security flaw.  The specification for EAP-TLS [RFC5216] does not
   include guidance on how to decide if a certificate is valid for this
   specific authentication.  This standardization gap has lead to user
   interfaces, where the default setting for certificate validation was
   set to "Do not validate".  Even if the validation is active, the
   supplicant has no implicit information to determine the expected
   subject name in the server's certificate, so users need to manually
   configure the expected domain.  Failure to configure this or not
   configuring it at all could again lead to an attacker being able to
   compromise the TLS connection and, as a result, also the password
   sent in the inner authentication.

   There are two major security problems here, that this specification
   wants to address.  Firstly, the use of passwords as authentication
   method implies that the password needs to be sent to the server.  If
   an attacker observes this exchange, they can impersonate the user at
   any time.  Therefore, this specification uses FIDO authentication,
   which is based on asymmetric cryptography.  With this method, even if
   an attacker is able to compromise the TLS connection, they cannot
   impersonate the user based on the observed data.

   The second major security problem is the specification gap regarding
   certificate validation.  With EAP-FIDO, the supplicants now have a
   clear specification on how to decide wether or not a server
   certificate is considered valid for the current authentication flow.
   This is achieved by using the trust anchors available on most devices
   and a method to determine the valid server name based on implicit
   information of the authentication configuration.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Overview over the EAP-FIDO protocol

   The EAP-FIDO protocol comprises two phases: the TLS handshake phase
   and FIDO-exchange phase.

   During the TLS handshake phase, TLS is used to authenticate the EAP-
   FIDO server to the client.

   During the FIDO-exchange phase, the actual FIDO authentication is
   executed and the client authenticates itself to the server.

   Once the FIDO exchange is completed successfully, the client and
   server can derive keying material from the TLS handshake phase
   implicitly.

3.1.  TLS handshake phase

   During the TLS handshake phase, the client and server establish a TLS
   tunnel.  This is done using EAP-TLS [RFC5216], [RFC9190], [RFC9427]
   with the modifications described in TODO:SECTION LINK.  As part of
   the TLS handshake protocol, the EAP-FIDO server will send its
   certificate along with a chain of certificates leading to the
   certificate of a trusted CA.  The client will check this certificate
   using the rules in TODO:SECTION LINK.

   Once the TLS tunnel is established, the client and server proceed to
   the FIDO-exchange phase to perform the authentication of the client.

3.2.  FIDO-exchange phase

   In this phase, the TLS record layer is used to securily tunnel
   information between the EAP-FIDO client and EAP-FIDO server.

   For the FIDO-exchange phase, the client has two options, depending on
   the configuration and the capability of the FIDO token.

   If the FIDO token supports residential keys and EAP-FIDO is
   configured to use these for authentication, the client generates a
   challenge from the TLS keying material and triggers a FIDO challenge.

   If the client is not configured to use residential keys, the client
   first needs to send its username to the server.  The server will
   answer with a list of FIDO key IDs and the client will attempt to use
   one of these keys to authenticate.

4.  EAP-FIDO protocol flow and message format

   This section describes the preconditions and the configuration needed
   for EAP-FIDO, the protocol flow and the message format

4.1.  Preconditions and Configuration

   In order to successfully perform an EAP-FIDO authentication, the
   server and the client have to meet some preconditions and need to
   have a configuration.

   EAP-FIDO assumes that the FIOD authenticator is already registered
   with the server, that is, the EAP-FIDO server has access to the
   public key used to verify the authenticator's response as well as the
   corresponding credential id.

   On the client side, the supplicant must be configured with the
   Relying Party ID, and, if Passkeys are not used, with a Username.

4.2.  TLS handshake

   *  TLSv1.3 mandatory

   *  Certificate Check against publicly trusted CAs

   *  Certificate Name Check with RPID

   *  SNI?

4.3.  FIDO-exchange

   *  Server sends initial data

      -  RPID?

      -  Auth request level (Silent, up, uv)

      -  Additional Client-Data

   *  Choice: Passkey or not?

      -  When Passkey: GOTO "Client sends response"

   *  Client sends Username

   *  Server sends Key-List

   *  Client sends response

   *  Choice: Result

      -  When Successful and sufficient:

         o  Protected Success Indicator

      -  When Successful and not sufficient:

         o  Server sends signature request again with more information

      -  When not Successful:

         o  Protected Failure Indicator

4.3.1.  Message format

4.3.2.  Potocol Sequence

5.  Implementation Guidelines

6.  Design decisions

   This section documents several design decisions for the EAP-FIDO
   protocol

6.1.  Registration of FIDO2 keys is out of scope

   The FIDO CTAP2 protocol has distinct primitives for the registration
   and the usage of a FIDO2 credential.  This specification requires
   that the registratrion of the security token has been done out-of-
   band, for example using the WebAuthn protocol in a browser context.

   There are multiple degrees of freedom when registering a token with
   CTAP2.  This specification recognises the following choices at
   registration time, and defines how to effectuate an authentication
   transaction for any combination of these choices.

6.1.1.  Discoverable credentials vs. Non-Discoverable credentials

   FIDO2 tokens contain a master key which never leaves the security
   perimeter of the token exists on the device.  FIDO2 tokens transact
   by generating asymetric keypairs which are bound to a scope (often: a
   domain name, a RADIUS realm).  The scoped keying material is saved in
   either of two locations:

   *  Non-Discoverable Credentials: All the keying material is stored on
      the server-side.  The private key is encrypted with the token-
      specific master key so that the server can store, but not use, the
      device's private key.  During authentication transactions, the
      keying material is sent to the token for local decryption and
      usage.  The security token itself does not store any data
      persistently; it is stateless and thus the number of keypairs and
      scopes it manages is infinite.

   *  Discoverable Credentials: The keying material is stored on the
      security token itself, along with the scope for which the keypair
      was generated.  During authentication transactions, only the scope
      (as configured, or as sent by the server) determines which keypair
      is to be used in the transaction.  The key can store multiple keys
      for the same scope.  The number of keypairs that can be stored on
      the key is finite.

   EAP-FIDO supports both Discoverable and Non-Discoverable credentials.

6.1.2.  User involvement during registration

   Token registration can involve one of two levels of asserting the
   user presence.

   *  UP (userPresence): the registration ceremony ensures that a person
      is present at the token while registering the device (e.g. human
      tissue needs to touch a physical security key while the
      registration transaction executes).

   *  UV (userVerification): the security token registers a unique
      property of the user during the registration ceremony, such that
      it is asserted that only the exact same person can interact with
      the token in the future (e.g. by registering a fingerprint or
      facial recognition)

   During authentication transactions, an EAP-FIDO server can request
   one of three levels of asserting user presence.

   *  Silent (interaction with a human is not required)

   *  UP (physical interaction with a person is required)

   *  UV (physical interaction with the registered user is required).

   An authentication transaction can not request a higher level than was
   set at registration time; i.e. a token registered in UP mode can not
   transact in UV mode.

   EAP-FIDO supports all three transaction modes, and the server can
   signal its required minimum assertion level for each individual
   authentication transaction.

6.2.  FIDO2 key scopes

   The scope of a FIDO2 key as set during the registration transaction
   determines the contexts in which it can be used.  In EAP-FIDO, the
   following three notions interplay:

   *  the realm of username as used in the EAP-Identity exchange ("outer
      ID")

   *  the servername as presented during the EAP-TLS exchange by the
      EAP-FIDO server

   *  the relyingPartyIdentifier (rpId) that is used during the FIDO
      CTAP2 client authentication phase

   EAP-FIDO requires the registered scope to be:

   *  identical to the realm in the outer ID

   *  within the same second-level domain as the EAP-TLS server
      certificate will be

   *  within the same second-level domain as the FIDO rpId

6.3.  EAP-Method with EAP-TLS vs standalone EAP method to be used in
      tunnels

   Since there already exist EAP methods that provide a TLS tunnel and
   are capable of encapsulating further EAP methods, e.g.  EAP-PEAP or
   EAP-TTLS, the question arises, why this specification does not focus
   solely on the FIDO exchange as a standalone EAP method instead of re-
   specifying a new EAP-method that again makes use of EAP-TLS.

   The main reason for a decision against this is the potential for
   misconfiguration.  One of the goals for this EAP method is to provide
   a means to validate the server certificate using implicit
   configuration options.  Using EAP-TTLS or EAP-PEAP would counteract
   this goal, since in most supplicants the configuration for the
   different phases of the tunneled TLS methods is done seperately, so
   the users would have to configure the certificate check parameters
   manually again.  Additionally, not every supplicant application
   allows access to information about the phase 1 exchange, namely the
   server certificate parameters, which is neccessary for the security
   of the EAP-FIDO exchange.  Specifying EAP-FIDO as standalone EAP
   methods would therefore require modifying the EAP-TTLS or EAP-PEAP
   stack.  Implementers might be tempted to re-use the insecure and
   error-prone configuration interfaces.  To prevent this from the
   start, EAP-FIDO specifies an EAP-TLS based EAP method that cannot be
   used standalone.

   Although this requires protentially duplicate code for supplicants
   that support multiple EAP-TLS based methods, the authors believe this
   means of specification to be more resistant against implementation
   errors and prevent error-prone user interfaces.

7.  Security Considerations

   TODO Security

8.  IANA Considerations

   This document has no IANA actions.

9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5216]  Simon, D., Aboba, B., and R. Hurst, "The EAP-TLS
              Authentication Protocol", RFC 5216, DOI 10.17487/RFC5216,
              March 2008, <https://www.rfc-editor.org/rfc/rfc5216>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9190]  Preuß Mattsson, J. and M. Sethi, "EAP-TLS 1.3: Using the
              Extensible Authentication Protocol with TLS 1.3",
              RFC 9190, DOI 10.17487/RFC9190, February 2022,
              <https://www.rfc-editor.org/rfc/rfc9190>.

   [RFC9427]  DeKok, A., "TLS-Based Extensible Authentication Protocol
              (EAP) Types for Use with TLS 1.3", RFC 9427,
              DOI 10.17487/RFC9427, June 2023,
              <https://www.rfc-editor.org/rfc/rfc9427>.

9.2.  Informative References

   [FIDO-CTAP2]
              FIDO Alliance, "Client to Authenticator Protocol (CTAP)",
              21 June 2022, <https://fidoalliance.org/specs/fido-v2.1-
              ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-
              errata-20220621.html>.

   [FIDO-Glossary]
              FIDO Alliance, "FIDO Technical Glossary", 23 May 2022,
              <https://fidoalliance.org/specs/common-specs/fido-
              glossary-v2.1-ps-20220523.html>.

   [FIDO-SecRef]
              FIDO Alliance, "FIDO Security Reference", 23 May 2022,
              <https://fidoalliance.org/specs/common-specs/fido-
              security-ref-v2.1-ps-20220523.html>.

   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H.
              Levkowetz, Ed., "Extensible Authentication Protocol
              (EAP)", RFC 3748, DOI 10.17487/RFC3748, June 2004,
              <https://www.rfc-editor.org/rfc/rfc3748>.

   [RFC5281]  Funk, P. and S. Blake-Wilson, "Extensible Authentication
              Protocol Tunneled Transport Layer Security Authenticated
              Protocol Version 0 (EAP-TTLSv0)", RFC 5281,
              DOI 10.17487/RFC5281, August 2008,
              <https://www.rfc-editor.org/rfc/rfc5281>.

   [WebAuthn] World Wide Web Consortium, "Web Authentication: An API for
              accessing Public Key Credentials Level 2", 8 April 2021,
              <https://www.w3.org/TR/2021/REC-webauthn-2-20210408/>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Jan-Frederik Rieckers
   Deutsches Forschungsnetz | German National Research and Education Network
   Alexanderplatz 1
   10178 Berlin
   Germany
   Email: rieckers@dfn.de
   URI:   www.dfn.de


   Stefan Winter
   Fondation Restena | Restena Foundation
   2, avenue de l'Université
   L-4365 Esch-sur-Alzette
   Luxembourg
   Email: stefan.winter@restena.lu
   URI:   www.restena.lu
